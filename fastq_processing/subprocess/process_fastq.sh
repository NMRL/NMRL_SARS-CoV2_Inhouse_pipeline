#!/bin/bash
### The script is used to generate mutation report from demultiplexed, untrimmed fastq file of PE150 Illumina reads obtained in SARS CoV19 WGS experiment.

eval "$(conda shell.bash hook)" 
conda activate cutadaptenv
read_1_path=$(sed 's/ /\\ /g' <<< ${1}) #path to read_1 fastq file (escaping spaces in file names)
read_2_path=$(sed 's/ /\\ /g' <<< ${2}) #path to read_2 fastq file (escaping spaces in file names)
report_path=$(sed 's/ /\\ /g' <<< ${3}) #report folder path (escaping spaces in file names)
tool_path=$(sed 's/ /\\ /g' <<< ${4}) #path to the folder with stand-alone tools (escaping spaces in file names)
read_1_arr=(${read_1_path//\// }) #splitting path to read1 fastq file by \ into list
read_2_arr=(${read_2_path//\// }) #splitting path to read2 fastq file by \ into list
sample_id=$(echo $read_1_path | grep -oP '[0-9]{10}') #extracting sample id from the file path using regex

now=$(date +"%m_%d_%Y") #to be used later in named report folders
mkdir ../temp_files #to store temporary files generated by the tools

echo Trimming adapters
cutadapt -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -o ../temp_files/t_${read_1_arr[-1]} -p ../temp_files/t_${read_2_arr[-1]} "${read_1_path}" "${read_2_path}" > ../reports/${report_path}/${sample_id}_cutadapt_log.txt
# -a - adapter seq to trim on read_1 fastq file
# -A - adapter seq to trim on read_2 fastq file
# -o - output path for trimmed read_1 data
# -p - output path for timmed read_2 data

echo QC filtering
fastp -y -p -h ../reports/${report_path}/${sample_id}_fastp_report.html -i ../temp_files/t_${read_1_arr[-1]} -I ../temp_files/t_${read_2_arr[-1]} -o ../temp_files/qc_${read_1_arr[-1]} -O ../temp_files/qc_${read_2_arr[-1]} -l 50 -q 30
# -y - apply low complexity filter for poly-Nt artifacts (ref:https://github.com/OpenGene/fastp#low-complexity-filter for detailed explaination) 
# -p - display overrepresented sequences in the html report
# -i/-I - input paths for read_1 & read_2
# -o/-O - output paths
# -h - use the provided name to name the html report
# -l - trim-off the reads less than given length (bp)
# -q - trim-off the nt less that given phred score in base calling quality (e.g. Q30 = 1/1000 base calling error chance is allowed)



echo Aligning reads to reference
bwa mem ../resources/MN908947_3.fa -v 3 ../temp_files/qc_${read_1_arr[-1]} ../temp_files/qc_${read_2_arr[-1]} | samtools view -bS - | samtools sort -o ../temp_files/${sample_id}_sorted.bam
# # samtools view
#     # -b - output as bam file instead of sam file
#     # -S - outodetect input file format
# # https://www.biostars.org/p/117225/ - side note on bwa mem - why not to use bwa aln & bowtie2 as primary aligners


echo Trimming primers from raw bam file
#The command below is used to generate bed file to be used in primer trimming - use for new sets of primers as needed
# bwa mem -k 5 -T 16 MN908947_3.fa ../QIAseq_SARSCOV2_primers_v3-13.04.2021.fasta | samtools view -b -F 4 > ../QIAseq_SARSCOV2_primers_v3-13.04.2021.bam
# bedtools bamtobed -i  ../QIAseq_SARSCOV2_primers_v3-13.04.2021.bam > ../QIAseq_SARSCOV2_primers_v3-13.04.2021.bed
# -k - discard alignment matches shorted than k - improves alignment speed, but should be balanced against aligned seq. length/ref seq type (repeated seq) (e.g. primers of 15bp will have lower optimal value than reads of 150 bp) - default 30
# -T - alignments with scores lower than T will not be reported (ref: https://arxiv.org/pdf/1303.3997.pdf)

samtools index ../temp_files/${sample_id}_sorted.bam
ivar trim -e -b ../resources/QIAseq_SARSCOV2_primers_v3-13.04.2021.bed -p ../temp_files/${sample_id}_trimmed.bam -i ../temp_files/${sample_id}_sorted.bam > ../reports/${report_path}/${sample_id}_ivar_log.txt
samtools sort -o ../temp_files/${sample_id}_trimmed_sorted.bam ../temp_files/${sample_id}_trimmed.bam
samtools index ../temp_files/${sample_id}_trimmed_sorted.bam
# general ref: https://github.com/andersen-lab/paper_2018_primalseq-ivar/blob/master/cookbook/CookBook.ipynb
# -e - do not discard reads that do not contain primer sequences
# -b - primer sequences to use in bed format


echo Performing local realignment
mkdir -p ../temp_files/tmpdir #directory required by the abra tool
bedtools bamtobed -i ../temp_files/${sample_id}_trimmed_sorted.bam > ../temp_files/${sample_id}_trimmed_sorted.bed
# converting primer-trimmed bam file to bed to use as target regions for local realignment
java -jar ${tool_path}/abra2/abra-0.97-SNAPSHOT-jar-with-dependencies.jar --in ../temp_files/${sample_id}_trimmed_sorted.bam --out ../temp_files/${sample_id}_unsort_markd.bam --ref ../resources/MN908947_3.fa --targets ../temp_files/${sample_id}_trimmed_sorted.bed --working ../temp_files/tmpdir/
# #general ref: https://github.com/mozack/abra

echo Counting mapped reads
touch ../reports/${report_path}/${sample_id}_mapped_report.txt
samtools flagstat ../temp_files/${sample_id}_sorted.bam > ../reports/${report_path}/${sample_id}_mapped_report.txt

echo Generating seq_depth file ${sample_id}_seq_depth.txt
samtools sort -o ../temp_files/${sample_id}_markd.bam ../temp_files/${sample_id}_unsort_markd.bam
samtools index ../temp_files/${sample_id}_markd.bam
samtools depth ../temp_files/${sample_id}_markd.bam > ../reports/${report_path}/${sample_id}_seq_depth.txt

echo Generating vcf from ${sample_id}_sorted.bam
freebayes -f ../resources/MN908947_3.fa ../temp_files/${sample_id}_markd.bam | vcffilter -f "( QUAL > 20 )" AND "( DP > 15 )" > ../temp_files/${sample_id}.vcf
# # vcffilter -f - apply quality & depth filters on vcf file produced by freebayes 

echo Annotating ${sample_id}.vcf
java -Xmx8G -jar "${tool_path}/snpEff/snpEff.jar" MN908947 ../temp_files/${sample_id}.vcf > ../temp_files/${sample_id}.ann.vcf

echo Generating consensus sequence ${sample_id}_consensus.fasta
java -jar "${tool_path}/ConsensusFixer.jar" -d -mi -pluralityN 0.5 -plurality 0.5 -dash -mic 15 -mcc 15 -r ../resources/MN908947_3.fa -i ../temp_files/${sample_id}_markd.bam -o ../reports/${report_path}/${sample_id}_
# # -plurality - call ambiguous base if different bases occur at frequency >= plurality
# # -mcc - minimal coverage to call consensus - else place - (dash)
# # -mic - minimal coverage to call insertion (else -)
# # -f - only allow inframe insertions
# # -d - apply gaps if allowed by -pluralityN
# # -mi - apply insertions only if allowed by mic
# #ref:https://github.com/cbg-ethz/ConsensusFixer

echo Replacing alignment gaps with N
sed -i -E "s/-/N/g" ../reports/${report_path}/${sample_id}_consensus.fasta
# # -i - inplace
# # -E - allow regex

echo Changing fasta header
./consensus_headers.sh ../reports/${report_path}/${sample_id}_consensus.fasta

echo Generating csv mutation report file ${sample_id}.ann.csv
python vcf_to_csv_cmd.py ../temp_files/${sample_id}.ann.vcf ../reports/${report_path}/${sample_id}.ann.csv

echo Generating coverage plot file ${sample_id}_seq_depth_plot.html
python ../plotting/depth_plot.py ../reports/${report_path}/${sample_id}_seq_depth.txt ../reports/${report_path}/${sample_id}_seq_depth_plot.html

echo Cleaning the workspace
rm fastp.json
rm -r ../temp_files
rm ../subprocess/snpEff_genes.txt
rm ../subprocess/snpEff_summary.html
rm ../subprocess/.CF_log

